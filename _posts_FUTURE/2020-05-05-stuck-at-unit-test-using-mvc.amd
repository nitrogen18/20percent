---
title: Stuck at unit test using MVC
tags: Architecture
comments: true
---

Hello, Good day! gonna share my thoughts about this Unit Test topic. I feel there's somethings wrong, so I look up and search
something in my doubt. Looking back of what i'm pointing, I tried to do Unit Test since theres something benefits of creating
this test, it makes the code more reliable and bug free since we can do click Unit Test after doing some changes in codebase.
But then I have this struggle on how do I unit test my Modules which are UIViewControllers, i cant test them since some of my
function and logics were tightly coupled. It means that in 1 function there were two or more business logic. Going back to Unit Test

Unit Test via testable import needs a return function in order to test but since my functions were already coupled, I need to
decompose/breaks them into a smaller pieces which I have my own trust issues. I feel there something strange bug will pop out
somewhere since I moved some of the business logic. So what I did is UI Test, its an actual test on a simulator of physical
device, It's somehow resembles in Selenium which automates the action on simulator. We can just click record and do some
clicks on simulator, then XCode will provide the action. Thats one of alternative of testing my codebase since I have this trust
issues on decomposing coupled functions.

Meanwhile, while reading some stuffs on the internet. I found this article which gaves me a cold water pour on me? XD anyway I
mean I relate of what he said.

```
So what’s wrong with the code above? In the PhotoListViewController, we can find the presentational logic such as converting Date to String and when to start/stop the activity indicator. We also have the View code such as the implementation of showing/hiding the table view. In addition, there’s another dependency, the API service, in the view controller. If you plan to write tests for the PhotoListViewController, you will find that you’re stuck since it’s too complicated. We have to mock the APIService, mock the table view and mock the cell to test the whole PhotoListViewController. Phew!
```
