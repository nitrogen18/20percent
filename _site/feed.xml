<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-05T12:05:46+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ô£ø iOS Dev Notes</title><entry><title type="html">Simple Continuous Integration Ideas (CI)</title><link href="http://localhost:4000/posts/Continuous-Integration-CI-Ideas" rel="alternate" type="text/html" title="Simple Continuous Integration Ideas (CI)" /><published>2020-05-10T00:00:00+08:00</published><updated>2020-05-10T00:00:00+08:00</updated><id>http://localhost:4000/posts/Continuous-Integration-CI-Ideas</id><content type="html" xml:base="http://localhost:4000/posts/Continuous-Integration-CI-Ideas">&lt;p&gt;Continuous Integration and Deployment (CI/CD) is a must in developing an apps specially if we want to make our life easier. It automates our daily task in a sense of someone doing our repetitive actions instead of us. By integrating Continuous Integration/Deployment, there's a machine that acts as a bot and do certain acts. Some CI/CD Server provides steps for developer to choose based on their ideal workflow. There were a lot of rules to be chosen and the most popular were the Unit Tests and Automatic Deployment which automatically archive and deploy the app in a certain App platform (Firebase/Appstore/Playstore) etc.&lt;/p&gt;

&lt;p&gt;I've already tried &lt;code class=&quot;highlighter-rouge&quot;&gt;Continuous Deployment&lt;/code&gt; step which automatically deploys &lt;code class=&quot;highlighter-rouge&quot;&gt;.ipa&lt;/code&gt; (iOS Appstore Package) file to Firebase instead of doing manual steps. It's very helpful specially for the people who are doing a lot of multitasking.&lt;/p&gt;

&lt;p&gt;Going back to CI/CD, these are my current configuration in our CI Server with integrated Unit/UI attached on project. Also sharing this for my current workflow configurations and some simple ideas of CI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bitrise CI/CD&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CHAIN-PRODUCTION-UnitUITest-Automated&lt;/li&gt;
  &lt;li&gt;CHAIN-STAGING-UnitUITest-Automated&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First trigger will starts on CHAIN-PRODUCTION. At the end of workflow, it triggers the next Workflow which is &lt;code class=&quot;highlighter-rouge&quot;&gt;CHAIN-STAGING&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Workflow: &lt;strong&gt;CHAIN-PRODUCTION&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Stack:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode11.7.x, on macOS 10.15.6 (Catalina)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Env var:&lt;/strong&gt; $BITRISE_GIT_BRANCH = &lt;strong&gt;master&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Before upgrading my Xcode to 12, my last setup was using XCode Version 11.7, so i change some configuration based on my last Xcode and MacOS.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Xcode 11.7 , macOS 10.x (Catalina)&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Workflow: &lt;strong&gt;CHAIN-STAGING&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Stack:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode 12.2.x on macOS 10.15.6 (Catalina)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Env var:&lt;/strong&gt; $BITRISE_GIT_BRANCH = &lt;strong&gt;develop (default)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Since my current Xcode is already version 12.x (Xcode12), I used this version to mock up with my current setup except the OS. I've upgraded my OS to BigSur 12 already but the currently available stacks on Bitrise were Catalina, Mojave and High Sierra which already have builtin Xcode Version.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Xcode 12.2.x, macOS 10.x (Catalina)&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: I added Sample ENV Login in Xcode
Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheme &amp;gt; Test &amp;gt; Arguments &amp;gt; Environment Variables &amp;gt; Name Value&lt;/code&gt;, then add your ENV Values&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple CI Ideas:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git push develop&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;trigger Unit/UI Tests
    &lt;ul&gt;
      &lt;li&gt;every push in Develop Branch, Unit/UI Test CI on Bitrise will trigger. The downside is when we're changing simple part of the code, this idea will still trigger. For example, just adding a newline or space. This is very inconvenient to do a trigger for just changing a simple part of the code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;git push with tag&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;trigger auto deployment to firebase or auto deployment to firebase with unit/ui tests
    &lt;ul&gt;
      &lt;li&gt;every tag included in push, the CI will trigger. This is very ideal CI steps for me since Bitrise CI will only trigger once it detects tag on my git push. Meaning it will solve the first CI Idea which always trigger when push in the repo. Even if we push a lot on the remote repo, as long as it didn't include any tags, this CI idea will never trigger. The downside is when we have to specify the trigger based on the name of the tags, for example staging and production, CI will still executes. This CI ideas can't identify particular tags because it's primary definition is to &lt;code class=&quot;highlighter-rouge&quot;&gt;trigger by tag&lt;/code&gt;`&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Specific Remote Branch for deployment&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;This idea comes with my iOS head, he suggest that there's specific branch for deployment or production, once merge request accepted or someone directly push on that branch, the Bitrise CI will trigger. For example
  Remote Branch:
    &lt;ul&gt;
      &lt;li&gt;master&lt;/li&gt;
      &lt;li&gt;develop&lt;/li&gt;
      &lt;li&gt;*firebase-deployment
In this example, we add specific remote branch for firebase named &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase-deployment&lt;/code&gt;. Once we push on that remote branch, the Bitrise CD will archive and deploy the app to firebase. It solves the problem in &lt;code class=&quot;highlighter-rouge&quot;&gt;git push with tag&lt;/code&gt; since theres specific remote branch for it. We can create two branch for Unit/UITest and for Firebase-Deployment but it violates the &lt;strong&gt;Gitflow Concept&lt;/strong&gt; if we have this branches living in our Remote Repository. I will discuss this Gitflow via iOS in the near future.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt; CI/CD is very beneficial for Mobile Developer since it makes their life more easier, also for Enterprise Apps that include a lot of repetitive work. In my current CI Setup, doing daily CI seems unlogical to do instead just wrap it Unit or UI test on &lt;code class=&quot;highlighter-rouge&quot;&gt;Pull Request&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; on remote branch, but there were some benefits of integrating this steps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of Daily CI&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It ensures that the User can login for the rest of the day given that the Unit/UI Test performed before the starting of app usage, ex. 7:30am.&lt;/li&gt;
  &lt;li&gt;It gives relief when you step aside the project for a while. You just need to check Telegram for CI Unit/UI Test Result, and also you can monitor if the app still run.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Overall, it helps to ensure the app will run on a daily basis. Ex. Login, Logout, Update some data in phone, etc. But in the end, it can be solve by doing Unit Test via endpoints. Both were beneficial which are [Unit and UI Tests] as long us we cover to test the core or critical business logic of the app, we're good ‚úåüèª.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="Tools" /><summary type="html">Continuous Integration and Deployment (CI/CD) is a must in developing an apps specially if we want to make our life easier. It automates our daily task in a sense of someone doing our repetitive actions instead of us. By integrating Continuous Integration/Deployment, there's a machine that acts as a bot and do certain acts. Some CI/CD Server provides steps for developer to choose based on their ideal workflow. There were a lot of rules to be chosen and the most popular were the Unit Tests and Automatic Deployment which automatically archive and deploy the app in a certain App platform (Firebase/Appstore/Playstore) etc.</summary></entry><entry><title type="html">Migrating from Xcode 11 to 12</title><link href="http://localhost:4000/posts/migrating-from-xcode11-to-12" rel="alternate" type="text/html" title="Migrating from Xcode 11 to 12" /><published>2020-05-09T00:00:00+08:00</published><updated>2020-05-09T00:00:00+08:00</updated><id>http://localhost:4000/posts/migrating-from-xcode11-to-12</id><content type="html" xml:base="http://localhost:4000/posts/migrating-from-xcode11-to-12">&lt;p&gt;When Apple introduced Big Sur with adapting their own built-in processor, which is the Apple M1 for their upcoming Macbook variants, my working project faced some problems regarding on migration from Xcode11 to Xcode12. It took me few days to figure out what happened and the reasons why the latest Xcode was failing.&lt;/p&gt;

&lt;p&gt;Initial findings were firstly, Xcode12 supports the arm architecture that disabled way back old versions of Xcode. Xcode Simulator runs in x86_64 architecture Intel because the default processor used by Apple was Intel. Since they're shifting to arm, Xcode12 included the arm architecture in Simulator. When I shifted to Xcode12, it compiled to arm64 instead of x86_64 Intel. Xcode12 must detect that i'm using Intel processor and the project must compile in x86_64 architecture, but forces it to compile in arm64. While doing random stuff, I tried to create a new project using latest Xcode12 to check if the problem will come out with my fresh installed Xcode12 since it can't detect my current Macbook Intel, but the result was different from my project built in Xcode11. The new project can detect my current processor Intel and it compiled by using x86_47 which is right. This means that some of the projects built in Xcode11 may face some problem same as mine. Secondly, Xcode12 deprecate the VALID_ARCHS option in project build settings that can be seen in Xcode11 and shifts into ONLY_ACTIVE_ARCH (Build Active Architecture Only) for Xcode12. This might be another problem on why the project failed. Based on some information that I've read, Build Active Architecture Only is an option to choose what architecture will Xcode integrate in the project. It either automatically adapt what target architecture will be used or make it manual based on the Valid Architecture indicated in the Project Settings. I tried to use the yes option in Build Active Architecture Only but still there's an error popping out even when I set it to all of my schemes, so I tried the no option, and put the VALID_ARCHS manually. For my manual configuration, I only set two settings for VALID_ARCHS and one for Exclude Architecture.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Build Active Architecture = no

Excluded Architecture
Any iOS Simulator SDK = arm64

VALID_ARCHS
Any iOS Simulator SDK = x86_64
Any iOS SDK = arm64 armv7s armv7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reasons why I exclude the &lt;code class=&quot;highlighter-rouge&quot;&gt;arm64&lt;/code&gt; in Any iOS Simulator is that to force the Xcode to avoid compile it as an &lt;code class=&quot;highlighter-rouge&quot;&gt;arm64&lt;/code&gt; because I'm not using &lt;code class=&quot;highlighter-rouge&quot;&gt;Apple M1 chip&lt;/code&gt;. To complete the &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID_ARCHS&lt;/code&gt; configuration, I include the &lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64&lt;/code&gt; too in the &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID_ARCHS&lt;/code&gt; for iOS Simulator which is &lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64&lt;/code&gt;. For the the iOS SDK, I include all valid archs for iOS which are &lt;code class=&quot;highlighter-rouge&quot;&gt;arm64 armv7s armv7&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/upgrade-xcode/exclude.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/upgrade-xcode/valid.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The drawbacks of this configuration is that if someone build it using their Xcode12, it will fail since the default project settings were already modified specially using Xcode 11. It will conflict since the Xcode11 &lt;code class=&quot;highlighter-rouge&quot;&gt;VALID_ARCHS&lt;/code&gt; shifts to &lt;code class=&quot;highlighter-rouge&quot;&gt;ONLY_ACTIVE_ARCH&lt;/code&gt; for Xcode12. If someone needs to build this project, the first step would be doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; or for totally clean pod build, execute the &lt;code class=&quot;highlighter-rouge&quot;&gt;pod deintegrate&lt;/code&gt; first before proceeding to &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;. After that if the user wants to shift to their current projects, they must do the &lt;code class=&quot;highlighter-rouge&quot;&gt;pod deintegrate&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; to revert back their default pod build settings configuration.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="Xcode" /><summary type="html">When Apple introduced Big Sur with adapting their own built-in processor, which is the Apple M1 for their upcoming Macbook variants, my working project faced some problems regarding on migration from Xcode11 to Xcode12. It took me few days to figure out what happened and the reasons why the latest Xcode was failing.</summary></entry><entry><title type="html">Stuck at Unit Test via MVC</title><link href="http://localhost:4000/posts/stuck-at-unit-test-on-bitrise" rel="alternate" type="text/html" title="Stuck at Unit Test via MVC" /><published>2020-05-08T00:00:00+08:00</published><updated>2020-05-08T00:00:00+08:00</updated><id>http://localhost:4000/posts/stuck-at-unit-test-on-bitrise</id><content type="html" xml:base="http://localhost:4000/posts/stuck-at-unit-test-on-bitrise">&lt;p&gt;Hello, Good day! gonna share my thoughts about this Unit Test topic. I feel there's somethings wrong, so I look up and explore
about it. Looking back of what i'm pointing, I tried to do Unit Test since theres something benefits of creating
this test. It makes the code more reliable and bug free since we can do click Unit Test after doing some changes in codebase.
But then I have this struggle on how to fully cover unit test in the Project which are UIViewControllers. I can't test them since some of my
function and logics were tightly coupled. It means that in one function there were two or more business logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unit Test&lt;/strong&gt; via testable import needs a return function in order to test it but since my functions were already coupled, I need to
decompose/breaks them into a smaller pieces which I have my own trust issues. I feel there something strange bug will pop out
elsewhere since I will move some of the business logic from my codebase. So what I did is &lt;strong&gt;UI Test&lt;/strong&gt;, its an actual test on a simulator of physical device, It's somehow resembles in Selenium which automates the action on simulator. We can just click record and do some clicks on simulator, then XCode will provide the action code. That's the one of alternative of testing my codebase since I have this trust
issues on breaking them down into smaller pieces/functions.&lt;/p&gt;

&lt;p&gt;Meanwhile, while reading some stuffs on the internet. I found this feedback which I relate of what he said.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/someone.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In his case, he had this PhotoListViewController with a lot of business logic like converting date, start/stop activity indicator,
showing/hiding table view, also with a dependency API Service. He points out its too complicated since there were different kind of
presentation logic in one file which resembles in my case(MVC), thats why the MVC is also called as &lt;strong&gt;Massive View Controller&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Based on my readings there were good solution for this; is to implement a Software Architecture Pattern that implements &lt;strong&gt;Presentation/Domain Layer&lt;/strong&gt; which all business process will be put in here. There are some of Software Architecture Pattern that implements it, the &lt;strong&gt;MVP&lt;/strong&gt; and &lt;strong&gt;MVVC&lt;/strong&gt; are widely know for this that has the &lt;strong&gt;Separation of Concern&lt;/strong&gt; to other layer which gives benefit to implement an extensive &lt;strong&gt;Unit Test&lt;/strong&gt; for every Data/UI component. Also included some &lt;strong&gt;High Learning Curve Architecture Design Patterns&lt;/strong&gt; which are &lt;strong&gt;VIPER&lt;/strong&gt; and &lt;strong&gt;REDUX&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Hoping to tackle this in the near future.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="Architecture" /><summary type="html">Hello, Good day! gonna share my thoughts about this Unit Test topic. I feel there's somethings wrong, so I look up and explore about it. Looking back of what i'm pointing, I tried to do Unit Test since theres something benefits of creating this test. It makes the code more reliable and bug free since we can do click Unit Test after doing some changes in codebase. But then I have this struggle on how to fully cover unit test in the Project which are UIViewControllers. I can't test them since some of my function and logics were tightly coupled. It means that in one function there were two or more business logic.</summary></entry><entry><title type="html">Pod Install via No Internet</title><link href="http://localhost:4000/posts/pod-install-via-no-internet" rel="alternate" type="text/html" title="Pod Install via No Internet" /><published>2020-05-07T00:00:00+08:00</published><updated>2020-05-07T00:00:00+08:00</updated><id>http://localhost:4000/posts/pod-install-via-no-internet</id><content type="html" xml:base="http://localhost:4000/posts/pod-install-via-no-internet">&lt;p&gt;What will happen if we &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; without an internet?. By adding parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;--verbose&lt;/code&gt; we can check on what happens inside the pod command. In verbose log, pod checks the pod cache library first if the pod library exists; If not, then it will search the pod library on the internet.&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;--verbose&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;pod update&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Look for pod cache library path and change on its directory &lt;code class=&quot;highlighter-rouge&quot;&gt;bash command: cd *path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/podinstall/podinstall.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/podinstall/podinstall-part2.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Print the availabe folders via &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/podinstall/pod-cache.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;These are the pod library cache available for offline use. This pod cache exist because of our past &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; in other project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: If we have a lot of pod written in our Podfile and one of its pod didn't exist in our pod cache library. Then it will force to fetch via Internet, making the &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; fail.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="Cocoapod" /><summary type="html">What will happen if we pod install without an internet?. By adding parameter --verbose we can check on what happens inside the pod command. In verbose log, pod checks the pod cache library first if the pod library exists; If not, then it will search the pod library on the internet.</summary></entry><entry><title type="html">Update Realm Studio to Latest Version</title><link href="http://localhost:4000/posts/update-realm-studio-to-latest-version" rel="alternate" type="text/html" title="Update Realm Studio to Latest Version" /><published>2020-05-06T00:00:00+08:00</published><updated>2020-05-06T00:00:00+08:00</updated><id>http://localhost:4000/posts/update-realm-studio-to-latest-version</id><content type="html" xml:base="http://localhost:4000/posts/update-realm-studio-to-latest-version">&lt;p&gt;&lt;img src=&quot;/assets/img/unsupported-realm-version/unsupported-realm.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you encounter this error, it seems that you have outdated Realm Studio like me. Maybe you download it somewhere specially from outdated guides via Internet. Similar case which I get a very low version &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 3.10.0&lt;/code&gt;. Prior to latest version of Realm Studio today, it jumps to &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 10.0.1&lt;/code&gt; which is very far from my Version that I have.&lt;/p&gt;

&lt;p&gt;This guide will help you to check or put the latest Realm Studio in your Mac.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unsupported-realm-version/realm-3.png&quot; alt=&quot;alt text&quot; /&gt;
&lt;strong&gt;Note:&lt;/strong&gt; My Realm Studio before, &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 3.10.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Uninstall existing Realm Studio in your Mac. Simply navigate to &lt;strong&gt;Apple Icon &amp;gt; About this Mac &amp;gt; Storage &amp;gt; Manage &amp;gt; Applications &amp;gt; *And look for Realm Studio&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Click Delete. *If nothing happens, restart the Mac and do the first step first after booting.&lt;/li&gt;
  &lt;li&gt;Navigate to this Link: &lt;a href=&quot;https://github.com/realm/realm-studio/releases&quot;&gt;https://github.com/realm/realm-studio/releases&lt;/a&gt; and go to Release Section. You will see there the different version of Realm Studio.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unsupported-realm-version/release-2.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After choosing the desire version, just click the link and look for &lt;code class=&quot;highlighter-rouge&quot;&gt;.dmg&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Download it and install, Done!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/unsupported-realm-version/realm-10.png&quot; alt=&quot;alt text&quot; /&gt;
&lt;strong&gt;Note:&lt;/strong&gt; My Realm Studio after, &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 10.0.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="Tools" /><summary type="html"></summary></entry><entry><title type="html">Check if Macbook bought from Offical Apple Store</title><link href="http://localhost:4000/posts/check-if-macbook-bought-from-official-apple-store" rel="alternate" type="text/html" title="Check if Macbook bought from Offical Apple Store" /><published>2020-05-05T00:00:00+08:00</published><updated>2020-05-05T00:00:00+08:00</updated><id>http://localhost:4000/posts/check-if-macbook-bought-from-official-apple-store</id><content type="html" xml:base="http://localhost:4000/posts/check-if-macbook-bought-from-official-apple-store">&lt;p&gt;Check if the Macbook bought from &lt;strong&gt;Official Apple Store&lt;/strong&gt; via &lt;strong&gt;Check Coverage&lt;/strong&gt; of Apple Website. If the result shows Valid Purchase Date, it means that the Macbook is&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link:&lt;/strong&gt; &lt;a href=&quot;https://checkcoverage.apple.com/&quot;&gt;https://checkcoverage.apple.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Apple icon - top left &amp;gt; About this Mac &amp;gt; Serial Number.&lt;/li&gt;
  &lt;li&gt;Put the &lt;code class=&quot;highlighter-rouge&quot;&gt;Serial Number&lt;/code&gt; to textbox.&lt;/li&gt;
  &lt;li&gt;Check if it's &lt;code class=&quot;highlighter-rouge&quot;&gt;Valid Purchase Date&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/check-if-macbook-valid.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to check an invalid Serial Number, you can read this thread about &lt;strong&gt;Invalid Serial Macbook Pro&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serial Number:&lt;/strong&gt; C02LJCSMSD56&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&quot;https://forums.macrumors.com/threads/so-a-guy-offered-me-a-retina-macbook-pro-but-its-serial-number-is-apparently-invalid.1713635/&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="Macbook" /><summary type="html">Check if the Macbook bought from Official Apple Store via Check Coverage of Apple Website. If the result shows Valid Purchase Date, it means that the Macbook is</summary></entry><entry><title type="html">Firebase Uploading dSYM Manually</title><link href="http://localhost:4000/posts/Firebase-Uploading-dSYM-Manually" rel="alternate" type="text/html" title="Firebase Uploading dSYM Manually" /><published>2020-05-03T00:00:00+08:00</published><updated>2020-05-03T00:00:00+08:00</updated><id>http://localhost:4000/posts/Firebase-Uploading-dSYM-Manually</id><content type="html" xml:base="http://localhost:4000/posts/Firebase-Uploading-dSYM-Manually">&lt;p&gt;I have this problem in my &lt;strong&gt;Production Scheme&lt;/strong&gt; when someone user crashes their app and
the dSYM's were not uploaded in our Firebase. It seems that it needs a lot of work to do in order to upload the dYSM's.
Based on the guide provided by Firebase, there are two ways to upload the dYSM's. First is to include script before build the iOS Projects and second is to do it manually. What I did is to do it manually by doing some minimal bash commands.&lt;/p&gt;

&lt;p&gt;These are my mostly used &lt;strong&gt;BASH&lt;/strong&gt; commands.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls
ls -l
cd *folder name
cd ~
cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;First, navigate to Appstore Connect and choose your app&lt;/li&gt;
  &lt;li&gt;Go to Activity Tab &amp;gt; Latest Version &amp;gt; Include Symbol &amp;gt; download dSYM&lt;/li&gt;
  &lt;li&gt;Put it on Desktop for easy reference&lt;/li&gt;
  &lt;li&gt;Go here &lt;a href=&quot;https://firebase.google.com/docs/crashlytics/get-deobfuscated-reports?platform=ios&quot;&gt;https://firebase.google.com/docs/crashlytics/get-deobfuscated-reports?platform=ios&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check &lt;strong&gt;Upload your dSYM Topic&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the Placeholders
dSYM_directory = the dSYM zip that you've downloaded in appstoreconnect
$PODS_ROOT/FirebaseCrashlytics/upload-symbols = the firebase upload-symbols in the current project&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You can get this by creating a script in Build Phases and add script &quot;echo $PODS_ROOT/FirebaseCrashlytics/upload-symbols&quot;&lt;/li&gt;
  &lt;li&gt;After building, navigate to Report Navigator in the left of xcode and click the first hammer icon. Scroll down at the bottom and you will find the current directory of $PODS_ROOT&lt;/li&gt;
  &lt;li&gt;/path/to/GoogleService-Info.plist = you can also get the path of this using the steps above
platform = ios&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;note-login-in-firebase-cli-first-before-executing-this-script&quot;&gt;NOTE: Login in firebase cli first before executing this script&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# BASH
firebase login
firebase projects:list # To check the projects, for verification
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First Script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find dSYM_directory -name &quot;*.dSYM&quot; | xargs -I \{\} $PODS_ROOT/FirebaseCrashlytics/upload-symbols -gsp /path/to/GoogleService-Info.plist -p platform \{\}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Second Script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/path/to/pods/directory/FirebaseCrashlytics/upload-symbols -gsp /path/to/GoogleService-Info.plist -p ios /path/to/dSYMs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/crashlytics-upload.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used second script and shows success on my Terminal but the Firebase still reflects the warning. Maybe it works or maybe not.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
PS: It works! If we manually upload the dSYM before this image below occurs, the error alert will still remain, but the following errors will not produce error alert anymore and the future errors it will be preceded and process by the Firebase/Crashlytics.
&lt;img src=&quot;/assets/img/dsym-error.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Better to have a script when we archive the project that automatically uploads the dSYM into Crashlytics. Possible solutions would be putting a script in Xcode after building the Production, or automate it via CI/CD Bitrise.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="Crashlytics" /><summary type="html">I have this problem in my Production Scheme when someone user crashes their app and the dSYM's were not uploaded in our Firebase. It seems that it needs a lot of work to do in order to upload the dYSM's. Based on the guide provided by Firebase, there are two ways to upload the dYSM's. First is to include script before build the iOS Projects and second is to do it manually. What I did is to do it manually by doing some minimal bash commands.</summary></entry><entry><title type="html">Bring iPhone Simulator in Front</title><link href="http://localhost:4000/posts/Bring-iPhone-Simulator-in-Front" rel="alternate" type="text/html" title="Bring iPhone Simulator in Front" /><published>2020-05-02T00:00:00+08:00</published><updated>2020-05-02T00:00:00+08:00</updated><id>http://localhost:4000/posts/Bring-iPhone-Simulator-in-Front</id><content type="html" xml:base="http://localhost:4000/posts/Bring-iPhone-Simulator-in-Front">&lt;p&gt;When I do some &lt;em&gt;build and run&lt;/em&gt; via Xcode, sometimes the &lt;strong&gt;Simulator&lt;/strong&gt; stuck at the back of IDE and it needs to be click manually in order to show. In this script, it will bring the simulator in front every time we build and run our project. Very convenient for Simulator Users like me. üòâ&lt;/p&gt;

&lt;p&gt;Steps: &lt;strong&gt;Xcode &amp;gt; Project &amp;gt; Build Phases &amp;gt; Targets &amp;gt; New Run&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bring-to-front.jpg&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tell application &quot;iPhone Simulator&quot;
activate
end tell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="Simulator" /><summary type="html">When I do some build and run via Xcode, sometimes the Simulator stuck at the back of IDE and it needs to be click manually in order to show. In this script, it will bring the simulator in front every time we build and run our project. Very convenient for Simulator Users like me. üòâ</summary></entry><entry><title type="html">Add Telegram Notification on Bitrise</title><link href="http://localhost:4000/posts/Add-Telegram-Notification-on-Bitrise" rel="alternate" type="text/html" title="Add Telegram Notification on Bitrise" /><published>2020-05-01T00:00:00+08:00</published><updated>2020-05-01T00:00:00+08:00</updated><id>http://localhost:4000/posts/Add-Telegram-Notification-on-Bitrise</id><content type="html" xml:base="http://localhost:4000/posts/Add-Telegram-Notification-on-Bitrise">&lt;p&gt;If you're using Bitrise and you always use Telegram, this workflow step will help you a lot by sending Bitrise Status build to your Telegram Account. Think about a trigger when you push to specific branch and do a Bitrise task on it. You need to check again to Bitrise Web in order to see the result of that task.&lt;/p&gt;

&lt;p&gt;This step adds a flavor in your Bitrise Workflow, and better to put it at the end of all of your steps. It will send notification to your Telegram after finishing the Bitrise Task.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;push to develop branch&lt;/li&gt;
  &lt;li&gt;Sit down or do some other task and wait for your phone to notify the build from Bitrise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Choose any of your workflow to put the Telegram Notification to be included at the end of it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/send-telegram-message-step.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click the + button at the end and search for &lt;em&gt;send telegram message&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/input-variables-telegram-step.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are four required input variables in this telegram step which are;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$TELEGRAM_BOT_TOKEN (SENSITIVE)
$TELEGRAM_CHAT_ID (SENSITIVE)
$DOWNLOAD_URL
$CUSTOM_MESSAGE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;ENV Details:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TELEGRAM_BOT_TOKEN - Your Bot Token.

TELEGRAM_CHAT_ID - Your Telegram Account Chat ID.

DOWNLOAD_URL - Environment if you want to Download your archive.

CUSTOM_MESSAGE - Depending on what you want to show in telegram bot.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;After that, search for &lt;strong&gt;BotFather&lt;/strong&gt; in Telegram search bar.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;$TELEGRAM_BOT_TOKEN&lt;/strong&gt; , you can follow my convo with him.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/godfather-convo.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For &lt;strong&gt;$TELEGRAM_CHAT_ID&lt;/strong&gt; , search for &lt;strong&gt;@get_id_bot&lt;/strong&gt; in Telegram search bar.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/start
/my_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/img/telegram-get-id.png&quot; width=&quot;380&quot; /&gt;
&lt;/p&gt;</content><author><name></name></author><category term="Bitrise" /><summary type="html">If you're using Bitrise and you always use Telegram, this workflow step will help you a lot by sending Bitrise Status build to your Telegram Account. Think about a trigger when you push to specific branch and do a Bitrise task on it. You need to check again to Bitrise Web in order to see the result of that task.</summary></entry></feed>